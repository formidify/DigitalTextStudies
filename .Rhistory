ggplot(data=sa) + geom_histogram(aes(pos))
# slice out most positive posts
sa %>%
filter(pos > 0.6) %>%
arrange(desc(pos)) %>%
slice(1:10)
ggplot(data=sa) + geom_histogram(aes(neu))
ggplot(data=sa) + geom_histogram(aes(neg))
ggplot(data=sa) + geom_histogram(aes(compound))
sa %>%
filter(pos > 0.6) %>%
arrange(desc(pos)) %>%
slice(1:10) %>%
print(line)
sa
library(ggplot2)
library(readr)
library(dplyr)
sa <- read_csv("~/Desktop/SocialMediaStory_NLP/sa_analysis.csv")
head(sa)
# mean(sa$neg) # mean of neg
# sd(sa$neg) # sd of neg
#
# mean(sa$neu) # mean of neu
# sd(sa$neu) # sd of neu
#
# mean(sa$pos) # mean of pos
# sd(sa$pos) # sd of pos
#
# mean(sa$compound) # mean of compound
# sd(sa$compound) # sd of compound
# sum(sa$pos > sa$neg) # number of posts more positive than negative
# sum(sa$pos < sa$neg) # number of posts more negative than positive
# sum(sa$pos == sa$neg) # number of posts as negative as positive
ggplot(data=sa) + geom_histogram(aes(pos))
# slice out most positive posts
sa %>%
filter(pos > 0.6) %>%
arrange(desc(pos)) %>%
slice(1:10) %>%
print(line)
ggplot(data=sa) + geom_histogram(aes(neu))
ggplot(data=sa) + geom_histogram(aes(neg))
ggplot(data=sa) + geom_histogram(aes(compound))
ggplot(data=sa) + geom_histogram(aes(pos))
# slice out most positive posts
sa %>%
filter(pos > 0.6) %>%
arrange(desc(pos))
ggplot(data=sa) + geom_histogram(aes(neu))
ggplot(data=sa) + geom_histogram(aes(neg))
ggplot(data=sa) + geom_histogram(aes(compound))
ggplot(data=sa) + geom_histogram(aes(pos))
# slice out most positive posts
sa_pos <- sa %>%
filter(pos > 0.6) %>%
arrange(desc(pos))
sa_pos
sa_pos$line
ggplot(data=sa) + geom_histogram(aes(neu))
ggplot(data=sa) + geom_histogram(aes(neg))
ggplot(data=sa) + geom_histogram(aes(compound))
ggplot(data=sa) + geom_histogram(aes(pos))
# slice out most positive posts
sa_pos <- sa %>%
filter(pos > 0.5) %>%
arrange(desc(pos))
sa_pos
sa_pos$line
ggplot(data=sa) + geom_histogram(aes(neu))
ggplot(data=sa) + geom_histogram(aes(neg))
ggplot(data=sa) + geom_histogram(aes(compound))
sa_neg <- sa %>%
filter(neg > 0.5) %>%
arrange(desc(neg))
sa_neg
sa_neg$line
sa_neu <- sa %>%
filter(neu > 0.9) %>%
arrange(desc(neu))
sa_neu
sa_neu$line
sa_pos[15]
sa_pos[,15]
sa_pos[15,]
sa_pos[18,]
sa_neu[140]
sa_neu[140,]
knitr::opts_chunk$set(collapse=TRUE, prompt=TRUE,comment=NULL,message=FALSE, include=TRUE, fig.height = 4, fig.width = 8)
library(tidyr)
library(Lahman)
glimpse(Teams)
cub <- Teams %>% filter(name == "Chicago Cubs") %>%
select(HR, HRA, yearID)
cub_narrow <- gather(cub, key = hit, value = hit_num, HR, HRA)
ggplot(cub_narrow) +
geom_line(aes(x = yearID, y = hit_num, color = hit)) +
ggtitle("Time series of home runs hit vs allowed")
help("geom_line")
library(readr)
library(tidyr)
amazon <- read_csv("~/Desktop/SocialMediaStory_NLP/scores_amazon.csv")
amazon <- gather(amazon, key = "attr", value = "value", neg, neu, pos, compound)
ggplot(amazon) + geom_line(aes(value, color = attr))
# mean(amazon$neg) # mean of neg
# sd(amazon$neg) # sd of neg
#
# mean(amazon$neu) # mean of neu
# sd(amazon$neu) # sd of neu
#
# mean(amazon$pos) # mean of pos
# sd(amazon$pos) # sd of pos
#
# mean(amazon$compound) # mean of compound
# sd(amazon$compound) # sd of compound
library(readr)
library(tidyr)
amazon <- read_csv("~/Desktop/SocialMediaStory_NLP/scores_amazon.csv")
amazon <- gather(amazon, key = "attr", value = "value", neg, neu, pos, compound)
ggplot(amazon) + geom_line(aes(y = value, x = seq(0:1),color = attr))
# mean(amazon$neg) # mean of neg
# sd(amazon$neg) # sd of neg
#
# mean(amazon$neu) # mean of neu
# sd(amazon$neu) # sd of neu
#
# mean(amazon$pos) # mean of pos
# sd(amazon$pos) # sd of pos
#
# mean(amazon$compound) # mean of compound
# sd(amazon$compound) # sd of compound
library(readr)
library(tidyr)
amazon <- read_csv("~/Desktop/SocialMediaStory_NLP/scores_amazon.csv")
# mean(amazon$neg) # mean of neg
# sd(amazon$neg) # sd of neg
#
# mean(amazon$neu) # mean of neu
# sd(amazon$neu) # sd of neu
#
# mean(amazon$pos) # mean of pos
# sd(amazon$pos) # sd of pos
#
# mean(amazon$compound) # mean of compound
# sd(amazon$compound) # sd of compound
library(readr)
library(tidyr)
amazon <- read_csv("~/Desktop/SocialMediaStory_NLP/scores_amazon.csv")
ggplot(data=amazon) + geom_histogram(aes(pos))
ggplot(data=amazon) + geom_histogram(aes(neu))
ggplot(data=amazon) + geom_histogram(aes(neg))
ggplot(data=amazon) + geom_histogram(aes(pos))
# mean(amazon$neg) # mean of neg
# sd(amazon$neg) # sd of neg
#
# mean(amazon$neu) # mean of neu
# sd(amazon$neu) # sd of neu
#
# mean(amazon$pos) # mean of pos
# sd(amazon$pos) # sd of pos
#
# mean(amazon$compound) # mean of compound
# sd(amazon$compound) # sd of compound
library(readr)
library(tidyr)
amazon <- read_csv("~/Desktop/SocialMediaStory_NLP/scores_amazon.csv")
ggplot(data=amazon) + geom_histogram(aes(pos))
ggplot(data=amazon) + geom_histogram(aes(neu))
ggplot(data=amazon) + geom_histogram(aes(neg))
ggplot(data=amazon) + geom_histogram(aes(compound))
# mean(amazon$neg) # mean of neg
# sd(amazon$neg) # sd of neg
#
# mean(amazon$neu) # mean of neu
# sd(amazon$neu) # sd of neu
#
# mean(amazon$pos) # mean of pos
# sd(amazon$pos) # sd of pos
#
# mean(amazon$compound) # mean of compound
# sd(amazon$compound) # sd of compound
movies <- read_csv("~/Desktop/SocialMediaStory_NLP/scores_movies.csv")
ggplot(data=movies) + geom_histogram(aes(pos))
ggplot(data=movies) + geom_histogram(aes(neu))
ggplot(data=movies) + geom_histogram(aes(neg))
ggplot(data=movies) + geom_histogram(aes(compound))
# mean(movies$neg) # mean of neg
# sd(movies$neg) # sd of neg
#
# mean(movies$neu) # mean of neu
# sd(movies$neu) # sd of neu
#
# mean(movies$pos) # mean of pos
# sd(movies$pos) # sd of pos
#
# mean(movies$compound) # mean of compound
# sd(movies$compound) # sd of compound
library(readr)
sa_analysis <- read_csv("~/Desktop/SocialMediaStory_NLP/scores_amazon.csv")
View(sa_analysis)
as.factor(cut(sa_analysis$length, 10))
men_words <- c("man", "men", "male", "males", "boy", "boys", "boyfriend", "boyfriends",
"husband", "husbands", "father", "fathers", "brother", "brothers")
posts <- sa_analysis$line
props <- c()
counts <- c()
for (i in 1:length(posts)) {
count <- length(strsplit(posts[i], split = " ")[[1]])
sum <- 0
for (j in 1:length(men_words)) {
sum <- sum + sum(grep(men_words[j], posts[i]))
}
counts[i] <- count
props[i] <- sum/count
}
sa_analysis$prop <- props
sa_analysis$length <- counts
ggplot(sa_analysis) +
geom_point(aes(x = compound, y = prop)) +
scale_x_continuous(limits = c(-1, 1)) +
scale_y_continuous(limits = c(0, 0.20))
as.factor(cut(sa_analysis$length, 10))
levels(as.factor(cut(sa_analysis$length, 10)))
as.factor(split(sa_analysis$length, cut(sa_analysis$length, 10)))
levels(as.factor(cut_number(sa_analysis$length, 10)))
library(ggplot2)
levels(as.factor(cut_number(sa_analysis$length, 10)))
knitr::opts_chunk$set(collapse=TRUE, prompt=TRUE,comment=NULL,message=FALSE, include=TRUE, fig.height = 4, fig.width = 8)
library(mdsr)
glimpse(babynames)
library(babynames)
glimpse(babynames)
library(babynames)
glimpse(babynames)
babynames %>%
group_by(year, sex) %>%
mutate(prop_A = sum(str_detect(name, "A")) / n()) %>%
ggplot() +
geom_line(aes(x = year, y = prop_A, color = sex))
library(ggplot2)
library(dplyr)
library(babynames)
glimpse(babynames)
babynames %>%
group_by(year, sex) %>%
mutate(prop_A = sum(str_detect(name, "A")) / n()) %>%
ggplot() +
geom_line(aes(x = year, y = prop_A, color = sex)) +
ggtitle("Proportion of names starting in 'A' over time for males and females") +
ylab("proportion of 'A' names")
tornadoes <- read_csv("http://math.carleton.edu/kstclair/data/TxTornadoes11-15.txt",
col_types = cols(
Fscale = col_factor(levels=c("EF0","EF1","EF2","EF3","EF4","EF5"))
))
tornadoes <- tornadoes %>% filter(!duplicated(.))
glimpse(tornadoes)
str_view_all("data321", "(.)(.)(.).*\\3\\2\\1")
str_view_all("data32188888", "(.)(.)(.).*\\3\\2\\1")
str_view_all("data3", "(.)(.)(.).*\\3\\2\\1")
str_detect("data321", "(.)(.)(.).*\\3\\2\\1")
str_detect("abcgegegegegegegcba", "(.)(.)(.).*\\3\\2\\1")
str_detect("abcba", "(.)(.)(.).*\\3\\2\\1")
str_detect("abccba", "(.)(.)(.).*\\3\\2\\1")
str_replace("1234", "\\d{4}", "\\d{2}:\\d{2}")
str_replace("1234", "\\d\\d\\d\\d", "\\d\\d:\\d\\d")
str_replace("1234", "\\d\\d\\d\\d", "\\d\\d:\\d\\d")
str_replace("1234", "\\d", ":")
str_replace("1234", "\\d\\d", ":")
str_replace("1234", "\\d*", ":")
str_replace("1234", "[\\d]", ":")
str_replace("1234", "[\\d][\\d]", ":")
str_replace("1234", "[\\d][\\d][\\d][\\d]", "\\1\\2:\\3\\4")
str_replace("1234", "(\\d)(\\d)(\\d)(\\d)", "\\1\\2:\\3\\4")
tornadoes %>%
mutate(BeginTime = str_replace(BeginTime, "(\\d)(\\d)(\\d)(\\d)", "\\1\\2:\\3\\4"))
library(lubridate)
(tornadoes_time <- tornadoes %>%
mutate(BeginTime = str_replace(BeginTime, "(\\d)(\\d)(\\d)(\\d)", "\\1\\2:\\3\\4")) %>%
mutate(Begin = ymd_hm(str_c(mdy(BeginDate), BeginTime, sep = " "))))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
tornadoes_time %>%
mutate(BeginTime_num = as.numeric(BeginTime)) %>%
ggplot() +
geom_bar(aes(x = BeginTime_num))
tornadoes %>%
mutate(BeginTime_num = as.numeric(BeginTime)) %>%
ggplot() +
geom_bar(aes(x = BeginTime_num))
tornadoes %>%
mutate(BeginTime_levels = as.factor(cut(as.numeric(BeginTime), 24)) %>%
ggplot() +
geom_bar(aes(x = BeginTime_num))
tornadoes %>%
mutate(BeginTime_levels = as.factor(cut(as.numeric(BeginTime), 24))) %>%
ggplot() +
geom_bar(aes(x = BeginTime_num))
tornadoes %>%
mutate(BeginTime_levels = as.factor(cut(as.numeric(BeginTime), 24))) %>%
ggplot() +
geom_bar(aes(x = BeginTime_levels))
tornadoes %>%
mutate(BeginTime_levels = as.factor(cut(as.numeric(BeginTime), 24))) %>%
ggplot() +
geom_bar(aes(x = BeginTime_levels)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(lubridate)
(tornadoes_time <- tornadoes %>%
mutate(BeginTime = str_replace(BeginTime, "(\\d)(\\d)(\\d)(\\d)", "\\1\\2:\\3\\4")) %>%
mutate(Begin = ymd_hm(str_c(mdy(BeginDate), BeginTime, sep = " "))))
ggplot(tornadoes) +
borders(database="state",regions="Texas") +
coord_quickmap()
ggplot(tornadoes) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_point(aes(y = BeginLat, x = BeginLong, color = Fscale))
ggplot(tornadoes) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_point(aes(y = BeginLat, x = BeginLon, color = Fscale))
parse_number("EF0")
ggplot(tornadoes) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_point(aes(y = BeginLat, x = BeginLon, color = Fscale))
ggplot(tornadoes) +
geom_point(aes(y = parse_number(Fscale), x = as.numeric(BeginTime)))
ggplot(tornadoes) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_point(aes(y = BeginLat, x = BeginLon, color = Fscale))
ggplot(tornadoes) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_point(aes(y = BeginLat, x = BeginLon, color = Fscale))
tornadoes_path1
glimpse(tornadoes_path1)
glimpse(tornadoes_path2)
glimpse(tornadoes_path)
library(lubridate)
(tornadoes_time <- tornadoes %>%
mutate(BeginTime = str_replace(BeginTime, "(\\d)(\\d)(\\d)(\\d)", "\\1\\2:\\3\\4")) %>%
mutate(Begin = ymd_hm(str_c(mdy(BeginDate), BeginTime, sep = " "))))
tornadoes <- read_csv("http://math.carleton.edu/kstclair/data/TxTornadoes11-15.txt",
col_types = cols(
Fscale = col_factor(levels=c("EF0","EF1","EF2","EF3","EF4","EF5"))
))
tornadoes <- tornadoes %>% filter(!duplicated(.))
glimpse(tornadoes)
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
MainStates <- map_data("state")
ggplot() +
geom_polygon(data = MainStates, aes(x = long, y = lat, group = group), color = "black", fill = "white") +
geom_point(data = tornadoes_path, aes(x = long, y = lat, color = county))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
MainStates <- map_data("state")
ggplot() +
geom_polygon(data = MainStates, aes(x = long, y = lat, group = group), color = "black", fill = "white") +
geom_point(data = tornadoes_path, aes(x = lon, y = lat, color = county))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
MainStates <- map_data("state")
ggplot() +
geom_polygon(data = MainStates, aes(x = long, y = lat, group = group), color = "black", fill = "white") +
geom_point(data = tornadoes_path, aes(x = Lon, y = Lat, color = county))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
MainStates <- map_data("state")
ggplot() +
geom_polygon(data = MainStates, aes(x = long, y = lat, group = group), color = "black", fill = "white") +
geom_point(data = tornadoes_path, aes(x = Lon, y = Lat, color = County))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
ggplot(tornadoes_path) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_path(aes(x = Lon, y = Lat, color = County))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
tornadoes_path %>%
group_by(County) %>%
ggplot() +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_path(aes(x = Lon, y = Lat, color = County))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
tornadoes_path %>%
group_by(County) %>%
ggplot() +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_path(aes(x = Lon, y = Lat))
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
tornadoes_path %>%
group_by(County) %>%
ggplot() +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_path(aes(x = Lon, y = Lat, color = BeginDate))
words
sum(str_detect(words, "[a, e, i, o, u]"))
c <- str_detect(words, "[a, e, i, o, u]") / length(words)
c
tornadoes %>%
mutate(BeginTime_levels = as.factor(cut(as.numeric(BeginTime), 24))) %>%
ggplot() +
geom_bar(aes(x = BeginTime_levels)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(lubridate)
(tornadoes_time <- tornadoes %>%
mutate(BeginTime = str_replace(BeginTime, "(\\d)(\\d)(\\d)(\\d)", "\\1\\2:\\3\\4")) %>%
mutate(Begin = ymd_hm(str_c(mdy(BeginDate), BeginTime, sep = " "))))
library(tidyr)
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
tornadoes_path$number <- as.character(seq(1:nrow(tornadoes)))
ggplot(tornadoes_path) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_path(aes(x = Lon, y = Lat, color = number)) +
theme(legend.position = "none")
library(tidyr)
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
tornadoes_path$number <- as.character(seq(1:nrow(tornadoes)))
ggplot(tornadoes_path) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_path(aes(x = Lon, y = Lat, color = group)) +
theme(legend.position = "none")
library(tidyr)
# step 1
tornadoes_path1 <- gather(tornadoes, key=location, value=coords, BeginLat:EndLon)
# step 2
tornadoes_path2 <- separate(tornadoes_path1, location, into=c("Time","loc"),sep=-4)
# step 3
tornadoes_path <- spread(tornadoes_path2, key = loc, value=coords)
tornadoes_path$number <- as.character(seq(1:nrow(tornadoes)))
ggplot(tornadoes_path) +
borders(database="state",regions="Texas") +
coord_quickmap() +
geom_path(aes(x = Lon, y = Lat, color = County)) +
theme(legend.position = "none")
length("love")
prop <- c()
for (i in 1:length(words)) {
prop[i] <- (str_detect(words[i], "a") + str_detect(words[i], "e") + str_detect(words[i], "i") + str_detect(words[i], "o") + str_detect(words[i], "u")) / str_length(words[i])
}
words[which(prop = max(prop))]
prop <- c()
for (i in 1:length(words)) {
prop[i] <- (str_detect(words[i], "a") + str_detect(words[i], "e") + str_detect(words[i], "i") + str_detect(words[i], "o") + str_detect(words[i], "u")) / str_length(words[i])
}
words[which(prop == max(prop))]
prop <- c()
numbers <- c()
for (i in 1:length(words)) {
numbers[i] <- str_detect(words[i], "a") + str_detect(words[i], "e") + str_detect(words[i], "i") + str_detect(words[i], "o") + str_detect(words[i], "u")
prop[i] <- (str_detect(words[i], "a") + str_detect(words[i], "e") + str_detect(words[i], "i") + str_detect(words[i], "o") + str_detect(words[i], "u")) / str_length(words[i])
}
words[which(numbers == max(numbers))]
words[which(prop == max(prop))]
sentences
